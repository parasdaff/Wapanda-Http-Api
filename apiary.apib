FORMAT: 1A
HOST: http://pricing.wapanda.net

# Pricing Engine
Pricing engine provides functionality for ride index definitions and trip pricing 
calculations. This document details the API for the pricing engine's HTTP interface. 

## Indexview [/indexview]

### Create or refresh a view of the ride price indices for all car types [POST]
* Pricing engine is provided with a driver location and driver online time. 
* Pricing engine provides the index of ongoing rates for all car types.
* Application calls this method before a driver going online, and periodically. 
* Application uses the indexes of "ongoing prices" as reference points in slide bar
* Application will store in memory the ratio of the selected ongoing rate to the driver car ongoing rate.
* On a refresh of the ongoing rates application will update the ratio, and notify the driver of the new ongoing rate.

+ Request (application/json)
    + Attributes (object)
        + `location` (Localization, required) - Driver's location
        
+ Response 200 (application/json)
    + Attributes (object)
        + `indexview` (IndexView, required) - Current Index of ongoing rates for each car type 


## Ride Pricing [/price]

### Predict ride price [POST]
* Pricing engine is provided a planned trip route and a list of car types each with their own ratio to the index.
* Pricing engine provides estimates of price charged by each of them as well as fair prices for each of them.

+ Request (application/json)
    + Attributes (object)
        + `route` (Route, required) - Planned route
        + `drivers` (array[DriverRatio], required) - List of drivers with their own ratios in the radius of "call" for a ride
        
+ Response 200 (application/json)
    + Attributes (object)
        + `prices` (array[RidePrice], required) - List of price and fair prices for each driver based on own rate
        + `thirdpartyestimators`  (ThirdPartyEstimators, required) - List of our own estimate of the thrid party views

+ Response 404
    Returned if in the array of drivers a car type unknown to the server is found
    + Body
    
## Finalize [/finalize]
nted 
### Save trip and adjust price [POST]
* Pricing engine is provided with information of an ended trip.
* Pricing engine save the useful information for future analysis.
* Pricing engine provides an adjusted trip price, based on applicable changes applied.


+ Request (application/json)
    + Attributes (TripInfo)
        
+ Response 200 (application/json)
    + Attributes (PriceAdjust)
Adding explicitely 


# Data Structures

## MoneyRepresentation (object)
Describes the typical minimum amount of money increments and currency code ISO 4217.
Examples:
USD is a typical currency trading in cents.  
JPY is a typical currency trading in units of Yens. 
### Properties
+ `increment`: 0.01 (number, required) - Minimum amount of money increments, rounding at that level 
+ `isocode`: `USD` (string, required) - Currency code ISO 4217


## GeoPoint (object)
A GeoJSON Point type geometry
### Properties
+ `type`: `point` (string, required) - Type of GeoJSON Geometry
+ `coordinates`: 77.68,24.56 (array[number], required) - Point position coordinates


## Localization
A GeoPoint with time info that localizes an event in time and space
### Properties
+ `geoloc` (GeoPoint, required) 
+ `time`: `2017-09-11T08:35:04.586Z` - Current time in ISO8601 format
+ `moneyview` (MoneyRepresentation, required) - will apply to all monetary values for this localization


## CarType (enum)
+ `Taxi` (string)
+ `Taxi-JerseyCity`
+ `Taxi-NewYorkCity`
+ `Standard` (string)
+ `SUV` (string)
+ `XL` (string)
+ `BlackCar` (string)


## OneIndex
A single container of cartype and ongoing (index) rates, 
fare is composed of basefare, fare per minute and per mile, however these will be indicative.
### Properties
+ `cartype`: `Taxi` (CarType, required) 
+ `indexrate`: 11.0 (number, required) - ongoing rate, index for this car type
+ `basefare`: 3.0 (number, required) - can be zero, the base fare for this car type 
+ `minutefare`: 0.55 (number, required) - the fare per minute
+ `milefare`: 1.75 (number, required) - the fare per mile 


## IndexView(object)
A view of the current ongoing rates for all car types
### Properties
+ `localization` (Localization, required) - Driver location
+ `expirytime`: `PT0H10M0S` (string, required) - ISO8601 format of time duration. Refresh the index view before such a time has elapsed.
+ `validRadius`: 5.0 (number, required) - Km from the original location where the index is valid.
+ `moneyview` (MoneyRepresentation, required) - How the rates have been expressed.
+ `indexArray` (array[OneIndex], required) - List of car types with index values. 


## DriverRatio (object)
The current ratio and most recent rate for the driver car type
### Properties
+ `driverId`: `afbe99d288c893e` (string, required) - Driver ID
+ `cartype`: `Standard` (CarType, required) - Driver's car.
+ `driverRatio`: 0.90 (number, required) - the driver's ratio (driver selected rate/ original ongoing rate) 
+ `indexRate`: 10.0 (number, required) - the most recent index for this driver's car type


## Route (object)
Planned trip route
### Properties
+ `from` (GeoPoint, required) - Trip start location
+ `to` (GeoPoint, required) - Trip end location
+ `estDistance`: 6800 (number, required) - Estimated distance in meters
+ `estDuration`: 3649 (number, required) - Estimated duration in seconds
+ `startTime`: `2017-09-11T08:35:04.586Z` (string, required) - Start date time in ISO8601 format
+ `moneyview` (MoneyRepresentation, required) - How the rates should be expressed.


## FairPrice(object)
Information regarding typical price and current fair price for a ride
### Properties
+ `typicalPrice`: 28.75 (number, required) - Typical price that is charged for the ride under typical conditions of weather, traffic, demand
+ `fairPrice`: 29.95 (number, required) - Estimated fair price in current conditions
+ `fairPriceLow`: 28.18 (number, required) - Estimated lower range of fair price in current conditions
+ `fairPriceHigh`: 32.50 (number, required) - Estimated higher range of fair price in current conditions
+ `minimumPrice`: 20.50 (number, required) - Lowest price for a similar ride ever observed
+ `maximumPrice`: 53.10 (number, required) - Highest price for a similar ride ever observed
+ `basicPrice`: 28.0 (number, required) - Price using basic fare components

## ThirdPartyEstimatedPrice (object)
Our own estimate of a third party service price
### Properties
+ `thirdpartyname`: "Uber" (string, required) - The name of the third part service
+ `thirdpartycartype`: "UberX" (string, required) - The car type name as known for this third party provider
+ `thirdpartyestimate` (FairPrice, required) - Our estimate of the price they would charge


## ThirdPartyEstimators (object)
All third party cars that we can estimate.
### Properties
+ `thirdpartyEstimates` (array[ThirdPartyEstimatedPrice], required) - All third party estimated cars
+ `moneyview` (MoneyRepresentation, required)


## RidePrice (object)
Driver's own estimated price according to his ratio to the index, and fair price for a car type on a planned route
### Properties
+ `driverRatio` (DriverRatio, required) - The driver's specific ratio and car type
+ `estPrice`: 25.75 (number, required) - Ride price according to driver's rate. The amount that will be charged.
+ `moneyview` (MoneyRepresentation, required)
+ `fairValues` (FairPrice, required) - The fields defining fair and typical prices for the ride
+ `levels_Go` (array[BidLevel], required) - Bid levels for the let's go screen.
+ `levels_Schedule` (array[BidLevel], required) - Bid levels for the scheduling bid levels screen.



## TripInfo (object)
Details of a finished trip
### Properties
+ `route` (Route, required) - Trip route
+ `driverRatio` (DriverRatio, required) - Driver info and own ratio at the time of booking
+ `fairPrice` (FairPrice, required) - Trip fair price view at the time of booking
+ `tripPrice`: 12.75 (number, required) - Accepted price for trip
+ `tripStartTime`: `2017-09-11T10:26:27.744Z` (string, required) - Trip start date time in ISO8601 format
+ `tripEndTime`: `2017-09-11T11:16:07.463Z` (string, required) - Trip end date time in ISO8601 format
+ `tripDuration`: 3897 (number, required) - Trip duration in seconds
+ `tripDistance`: 6989 (number, required) - Trip distance travelled
+ `isTest`: true (boolean, required) - Was the trip a test (True) or a production real ride (False).

## PriceChange (object)
Suggested changes to trip price.
### Properties
+ `change`: 1.50 (number, required) - Change to trip price
+ `reason`: `Actual distance more than planned` (string, required) - Detail about change

## PriceAdjust (object)
Overall adjustment to trip price, for now these are computed but not used in billing. The price charged is the one that was agreed at the time of booking 
### Properties
+ `moneyview` (MoneyRepresentation, required)
+ `changes` (array[PriceChange], required) - Changes to trip price

## BidIndicator (enum)
+ `Low` (string)
+ `Low to Fair` (string)
+ `Fair` (string)
+ `Fair to High` (string)
+ `High` (string)

## BidLevel (object)
Represents a price level available for bidding
### Properties
+ `levelPrice`: 34.25 (number, required) - Price level.
+ `indicator`: Low (BidIndicator, required) - low / high indicator

## ServiceAvalability [/ServiceAvalability]

### Check for the service avalability in particular area [POST]
* Api will check if wapanda is available in the area or not

+ Request (application/json)
    + Attributes (object)
        + `location`(lat: Double, lng: Double)- Rider/Driver's location
        
+ Response 200 (application/json)
    + Attributes (object)
        + isAvailable: True/false
